[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.poetry]
name = "praxis"
version = "0.1.0"
description = "BACKEND API"
authors = ["Praxis Team"]
readme = "README.md"
packages = [{include = "src"}]

[project]
name = "praxis"
version = "0.1.0"
description = "BACKEND API"
readme = "README.md"
authors = [
    {name = "Praxis Team"},
]
requires-python = ">=3.11,<3.13"
dependencies = [
    "pyyaml>=6.0.1,<7.0.0",
    "yt-dlp>=2025.1.15,<2026.0.0",
    "whisper>=1.1.10,<2.0.0",
    "openai>=1.60.0,<2.0.0",
    "pytest-asyncio>=0.21.1,<1.0.0",
    "openai-whisper>=20240930,<20240931",
    "typer>=0.9.0,<1.0.0",
    "rich>=13.7.0,<14.0.0",
    "questionary>=2.0.1,<3.0.0",
    "aiohttp>=3.11.11,<4.0.0",
    "aiofiles>=24.1.0,<25.0.0",
    "pytz>=2024.2,<2025.0",
    "pypdf>=5.2.0,<6.0.0",
    "pymupdf>=1.25.2,<2.0.0",
    "feedparser>=6.0.1,<7.0.0",
    "fastapi>=0.100.0,<1.0.0",
    "uvicorn[standard]>=0.30.0,<1.0.0",
    "python-dotenv>=1.0.1,<2.0.0",
    "pydantic>=2.0,<3.0",
    "sse-starlette>=2.1.0,<3.0.0",
    "aiosqlite>=0.20.0,<1.0.0",
    "python-json-logger>=2.0.7,<3.0.0",
    "httptools>=0.6.1,<1.0.0",
    "livekit-api>=0.7.0,<1.0.0",
    "requests>=2.31.0,<3.0.0",
    "numpy>=1.26.4,<2.0.0",
    "typing-extensions>=4.10.0,<5.0.0",
    "slowapi>=0.1.8,<1.0.0",
    "setuptools>=75.1.0,<76.0.0",
    "joblib>=1.4.2,<2.0.0",
    "alt-profanity-check>=1.5.2,<2.0.0",
    "pandas>=2.2.3,<3.0.0",
    "qdrant-client>=1.12.0,<2.0.0",
    "markdown>=3.7,<4.0",
    "bs4>=0.0.2,<1.0.0",
    "tiktoken>=0.8.0,<1.0.0",
    "poetry-plugin-export>=1.8.0,<2.0.0",
    "strawberry-graphql[fastapi]>=0.246.2,<1.0.0",
    "sqlalchemy>=2.0.36,<3.0.0",
    "pydantic-ai>=0.0.24,<1.0.0",
    "reportlab>=4.3.1",
    "pymilvus>=2.5.6",
    "chonkie>=0.5.1",
    "jsonschema>=4.23.0",
    "mcp[cli]>=1.9.4",
    "pytest-mock>=3.14.0",
    "slack-sdk>=3.35.0",
    "openai-agents>=0.0.17",
    "mlflow>=2.22.0",
    "RestrictedPython>=7.0,<7.4",
    "watchdog>=4.0.0",
    "httpx>=0.25.0,<1.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.0,<9.0.0",
    "debugpy>=1.8.12,<2.0.0",
    "pytest-cov>=4.0.0,<5.0.0",
    "black>=23.0.0,<24.0.0",
    "isort>=5.13.2,<6.0.0",
    "flake8>=6.0.0,<7.0.0",
    "mypy>=1.0.0,<2.0.0",
    "pre-commit==3.8.0",
    "ipython>=8.22.2,<9.0.0",
    "pytest-mock>=3.14.0,<4.0.0",
    "pyright>=1.1.402",
    "ipykernel>=6.29.5,<7.0.0",
    "types-requests>=2.32.4.20250611",
    "ruff==0.8.3",
    "types-PyYAML>=6.0.12.20250516",
    "types-pytz>=2025.2.0.20250516",
    "pandas-stubs>=2.2.3.250527",
    "vulture>=2.14",
    "types-aiofiles>=24.1.0.20250606",
    "MonkeyType>=23.3.0",
]

[project.scripts]
praxis = "src.cli:app"

[tool.pdm]
src-layout = true

[tool.pdm.scripts]
dev = "sh -c 'mkdir -p logs && python -m uvicorn src.main:app --host 0.0.0.0 --port 8080 --reload --reload-dir src 2>&1 | tee logs/backend.log'"
dev-debug = "sh -c 'mkdir -p logs && python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m uvicorn src.main:app --host 0.0.0.0 --port 8080 --reload --reload-dir src 2>&1 | tee logs/backend.log'"
praxis = {cmd = "python -c \"import sys; sys.path.insert(0, '.'); from src.cli import app; app()\"", env = {"PYTHONPATH" = "."}}
mcp = {cmd = "python -c \"import sys; sys.path.insert(0, '.'); from src.mcp.cli import app; app()\"", env = {"PYTHONPATH" = "."}}
mcp-dev = {cmd = "sh -c 'mkdir -p logs && python -c \"import sys; sys.path.insert(0, \\\".\\\"); from src.mcp.cli import app; app([\\\"start\\\", \\\"--debug\\\"])\" 2>&1 | tee logs/mcp.log'", env = {"PYTHONPATH" = "."}}

[tool.pdm.build]
includes = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
asyncio_mode = "auto"
addopts = "--cov=. --cov-report=term-missing"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"  # Updated to match project Python version
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.coverage.run]
source = ["."]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]

# === LINTING CONFIGURATION ===

[tool.ruff]
target-version = "py311"
line-length = 88
cache-dir = ".ruff_cache"

# Phase 1, 2 & 4 rules
[tool.ruff.lint]
extend-select = [
    "F",     # Pyflakes (basic errors)
    "E4",    # Import errors
    "E7",    # Statement errors
    "E9",    # Runtime errors
    # === PHASE 2 ADDITIONS ===
    "I",     # isort (import sorting)
    "F401",  # Unused imports
    "TCH",   # Type checking imports
    # === PHASE 4 ADDITIONS ===
    "B",     # flake8-bugbear (bug detection)
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez (timezone awareness)
    "ISC",   # flake8-implicit-str-concat
    "PIE",   # flake8-pie (misc lints)
    "PT",    # flake8-pytest-style
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
]

# Phase 4 specific ignores
extend-ignore = [
    "RET504",  # Unnecessary variable assignment before return
    "SIM108",  # Use ternary operator (sometimes less readable)
    "ARG002",  # Unused method argument (common in overrides)
]

# Exclude directories
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
    "migrations",
    "venv",
]

# Format settings
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

# Import sorting (isort compatibility)
[tool.ruff.lint.isort]
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# Per-file overrides
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # Allow unused and star imports
"tests/*" = ["F841", "ARG001", "PT004", "PT005", "ARG005"]  # Allow unused variables and fixture issues in tests
"src/api/*" = ["B008", "ARG001"]  # Allow FastAPI Depends in defaults and unused function arguments (common with dependencies)
"src/plugins/*/plugin.py" = ["B027"]  # Allow empty methods in plugin base classes
"src/cli/*" = ["PTH109", "PTH100", "PTH120", "PTH118", "B008"]  # Allow os.path usage in CLI for compatibility and Typer Options in defaults

[tool.ruff.lint.flake8-type-checking]
strict = true  # Move type-only imports to TYPE_CHECKING

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"  # Ban relative imports from parent modules
